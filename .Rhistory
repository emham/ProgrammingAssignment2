cacheSet <- function(x = NULL) {
cache1 <- x
getfunction <- function() cache1
setfunction <- function(y = NULL) {
cache1 <<- y
}
list(get = getfunction, set = setfunction)
}
cacheSet <- function(x = NULL) {
cache1 <- x
getfunction <- function() cache1
setfunction <- function(y = NULL) {
cache1 <<- y
}
list(get = getfunction, set = setfunction)
}
cacheGetSet <- function(cache, x = NULL, ...) {
cache2 <- cache$get()
message("Checking cache...")
if(is.null(cache2)) {
message("No previously cached value.")
} else {
print(cache2)
}
message("Setting new cached value...")
cache$set(x)
print(cache$get())
message("Finished.")
}
cache <- cacheSet(5)
cacheGetSet(cache, 6)
makeCacheMatrixList <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
fnList <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
return(fnList)
}
mat <- matrix(c(1,4,3,5,6,7,3,9,2), 3, 3)
makeCacheMatrixList <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
fnList <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
return(fnList)
get(x)
}
makeCacheMatrixList(mat)
makeCacheMatrixList <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
fnList <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
return(fnList)
}
makeCacheMatrixList(mat)
cacheSolve <- function(xlist, ...) {
I <- xlist$getinverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data, ...)
x$setinverse(I)
I
}
cacheSolve(makeCacheMatrixList(mat))
cacheSolve <- function(xlist, ...) {
I <- xlist$getinverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- xlist$get()
I <- solve(data, ...)
x$setinverse(I)
I
}
cacheSolve(makeCacheMatrixList(mat))
cacheSolve <- function(xlist, ...) {
I <- xlist$getinverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- xlist$get()
I <- solve(data, ...)
xlist$setinverse(I)
I
}
cacheSolve(makeCacheMatrixList(mat))
solve(mat)
cacheSolve <- function(xlist, ...) {
I <- xlist$getinverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- xlist$get()
I <- solve(data, ...)
xlist$setinverse(I)
I
}
makeCacheMatrixList <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
setinverse <- function(inverse) I <<- inverse
getinverse <- function() I
fnList <- list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
return(fnList)
}
mat <- (1:16, 4, 4)
mat <- matrix(1:16, 4, 4)
makeCacheMatrixList(mat)
list <- makeCacheMatrixList(mat)
cacheSolve(list)
list$set(mat)
list$setinverse(mat)
cacheSolve(list)
list$setinverse <- NULL
mat <- matrix(1, 4, 4)
cacheSolve(mat)
list <- makeCacheMatrixList(mat)
cacheSolve(list)
mat <- (c(-1, 2, 1, 1), 2, 2)
mat <- matrix(c(-1, 2, 1, 1), 2, 2)
list <- makeCacheMatrixList(mat)
cacheSolve(list)
cacheSolve(list)
